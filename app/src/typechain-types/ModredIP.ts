/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ModredIP {
  export type DisputeStruct = {
    disputeId: BigNumberish;
    ipTokenId: BigNumberish;
    disputer: AddressLike;
    reason: string;
    evidence: string;
    timestamp: BigNumberish;
    status: BigNumberish;
    arbitrator: AddressLike;
  };

  export type DisputeStructOutput = [
    disputeId: bigint,
    ipTokenId: bigint,
    disputer: string,
    reason: string,
    evidence: string,
    timestamp: bigint,
    status: bigint,
    arbitrator: string
  ] & {
    disputeId: bigint;
    ipTokenId: bigint;
    disputer: string;
    reason: string;
    evidence: string;
    timestamp: bigint;
    status: bigint;
    arbitrator: string;
  };

  export type IPAssetStruct = {
    tokenId: BigNumberish;
    owner: AddressLike;
    ipHash: string;
    metadata: string;
    isActive: boolean;
    isDisputed: boolean;
    registrationDate: BigNumberish;
    totalRevenue: BigNumberish;
    royaltyTokens: BigNumberish;
    tokenBoundAccount: AddressLike;
  };

  export type IPAssetStructOutput = [
    tokenId: bigint,
    owner: string,
    ipHash: string,
    metadata: string,
    isActive: boolean,
    isDisputed: boolean,
    registrationDate: bigint,
    totalRevenue: bigint,
    royaltyTokens: bigint,
    tokenBoundAccount: string
  ] & {
    tokenId: bigint;
    owner: string;
    ipHash: string;
    metadata: string;
    isActive: boolean;
    isDisputed: boolean;
    registrationDate: bigint;
    totalRevenue: bigint;
    royaltyTokens: bigint;
    tokenBoundAccount: string;
  };

  export type LicenseStruct = {
    licenseId: BigNumberish;
    ipTokenId: BigNumberish;
    licensee: AddressLike;
    commercialUse: boolean;
    derivativeWorks: boolean;
    exclusive: boolean;
    revenueShare: BigNumberish;
    duration: BigNumberish;
    issueDate: BigNumberish;
    isActive: boolean;
    terms: string;
  };

  export type LicenseStructOutput = [
    licenseId: bigint,
    ipTokenId: bigint,
    licensee: string,
    commercialUse: boolean,
    derivativeWorks: boolean,
    exclusive: boolean,
    revenueShare: bigint,
    duration: bigint,
    issueDate: bigint,
    isActive: boolean,
    terms: string
  ] & {
    licenseId: bigint;
    ipTokenId: bigint;
    licensee: string;
    commercialUse: boolean;
    derivativeWorks: boolean;
    exclusive: boolean;
    revenueShare: bigint;
    duration: bigint;
    issueDate: bigint;
    isActive: boolean;
    terms: string;
  };
}

export interface ModredIPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PLATFORM_FEE"
      | "ROYALTY_DENOMINATOR"
      | "accountImplementation"
      | "approve"
      | "balanceOf"
      | "claimRoyalties"
      | "disputes"
      | "erc6551Registry"
      | "getApproved"
      | "getDispute"
      | "getIPAsset"
      | "getIPDisputes"
      | "getIPLicenses"
      | "getLicense"
      | "getLicenseeLicenses"
      | "getOwnerIPs"
      | "getRoyaltyShare"
      | "ipAssets"
      | "ipToDisputes"
      | "ipToLicenses"
      | "isApprovedForAll"
      | "licenseeToLicenses"
      | "licenses"
      | "mintLicense"
      | "name"
      | "owner"
      | "ownerOf"
      | "ownerToIPs"
      | "payRevenue"
      | "ping"
      | "raiseDispute"
      | "registerIP"
      | "renounceOwnership"
      | "resolveDispute"
      | "royaltyShares"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setIPStatus"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalDisputes"
      | "totalIPs"
      | "totalLicenses"
      | "transferFrom"
      | "transferOwnership"
      | "transferRoyaltyShares"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "DisputeRaised"
      | "DisputeResolved"
      | "IPRegistered"
      | "IPStatusChanged"
      | "LicenseMinted"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "RevenuePaid"
      | "RoyaltyClaimed"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoyalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc6551Registry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIPAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIPDisputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIPLicenses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicense",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseeLicenses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerIPs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyShare",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ipAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipToDisputes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipToLicenses",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseeToLicenses",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "licenses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLicense",
    values: [
      BigNumberish,
      boolean,
      boolean,
      boolean,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToIPs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payRevenue",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "ping", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIP",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyShares",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIPStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDisputes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalIPs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLicenses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRoyaltyShares",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROYALTY_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc6551Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDispute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getIPAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIPDisputes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIPLicenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLicense", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseeLicenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerIPs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ipToDisputes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipToLicenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenseeToLicenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "licenses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerToIPs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRevenue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registerIP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIPStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDisputes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalIPs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLicenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRoyaltyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    ipTokenId: BigNumberish,
    disputer: AddressLike
  ];
  export type OutputTuple = [
    disputeId: bigint,
    ipTokenId: bigint,
    disputer: string
  ];
  export interface OutputObject {
    disputeId: bigint;
    ipTokenId: bigint;
    disputer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [disputeId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [disputeId: bigint, status: bigint];
  export interface OutputObject {
    disputeId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IPRegisteredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    ipHash: string,
    tokenBoundAccount: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    owner: string,
    ipHash: string,
    tokenBoundAccount: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    ipHash: string;
    tokenBoundAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IPStatusChangedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    isActive: boolean,
    isDisputed: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    isActive: boolean,
    isDisputed: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    isActive: boolean;
    isDisputed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseMintedEvent {
  export type InputTuple = [
    licenseId: BigNumberish,
    ipTokenId: BigNumberish,
    licensee: AddressLike
  ];
  export type OutputTuple = [
    licenseId: bigint,
    ipTokenId: bigint,
    licensee: string
  ];
  export interface OutputObject {
    licenseId: bigint;
    ipTokenId: bigint;
    licensee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevenuePaidEvent {
  export type InputTuple = [
    ipTokenId: BigNumberish,
    payer: AddressLike,
    amount: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    ipTokenId: bigint,
    payer: string,
    amount: bigint,
    description: string
  ];
  export interface OutputObject {
    ipTokenId: bigint;
    payer: string;
    amount: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyClaimedEvent {
  export type InputTuple = [
    ipTokenId: BigNumberish,
    claimant: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    ipTokenId: bigint,
    claimant: string,
    amount: bigint
  ];
  export interface OutputObject {
    ipTokenId: bigint;
    claimant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ModredIP extends BaseContract {
  connect(runner?: ContractRunner | null): ModredIP;
  waitForDeployment(): Promise<this>;

  interface: ModredIPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PLATFORM_FEE: TypedContractMethod<[], [bigint], "view">;

  ROYALTY_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  accountImplementation: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  claimRoyalties: TypedContractMethod<
    [ipTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  disputes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, bigint, bigint, string] & {
        disputeId: bigint;
        ipTokenId: bigint;
        disputer: string;
        reason: string;
        evidence: string;
        timestamp: bigint;
        status: bigint;
        arbitrator: string;
      }
    ],
    "view"
  >;

  erc6551Registry: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getDispute: TypedContractMethod<
    [disputeId: BigNumberish],
    [ModredIP.DisputeStructOutput],
    "view"
  >;

  getIPAsset: TypedContractMethod<
    [tokenId: BigNumberish],
    [ModredIP.IPAssetStructOutput],
    "view"
  >;

  getIPDisputes: TypedContractMethod<
    [ipTokenId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getIPLicenses: TypedContractMethod<
    [ipTokenId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getLicense: TypedContractMethod<
    [licenseId: BigNumberish],
    [ModredIP.LicenseStructOutput],
    "view"
  >;

  getLicenseeLicenses: TypedContractMethod<
    [licensee: AddressLike],
    [bigint[]],
    "view"
  >;

  getOwnerIPs: TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;

  getRoyaltyShare: TypedContractMethod<
    [ipTokenId: BigNumberish, holder: AddressLike],
    [bigint],
    "view"
  >;

  ipAssets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        tokenId: bigint;
        owner: string;
        ipHash: string;
        metadata: string;
        isActive: boolean;
        isDisputed: boolean;
        registrationDate: bigint;
        totalRevenue: bigint;
        royaltyTokens: bigint;
        tokenBoundAccount: string;
      }
    ],
    "view"
  >;

  ipToDisputes: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  ipToLicenses: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  licenseeToLicenses: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  licenses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        licenseId: bigint;
        ipTokenId: bigint;
        licensee: string;
        commercialUse: boolean;
        derivativeWorks: boolean;
        exclusive: boolean;
        revenueShare: bigint;
        duration: bigint;
        issueDate: bigint;
        isActive: boolean;
        terms: string;
      }
    ],
    "view"
  >;

  mintLicense: TypedContractMethod<
    [
      ipTokenId: BigNumberish,
      commercialUse: boolean,
      derivativeWorks: boolean,
      exclusive: boolean,
      revenueShare: BigNumberish,
      duration: BigNumberish,
      terms: string
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  ownerToIPs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  payRevenue: TypedContractMethod<
    [ipTokenId: BigNumberish, description: string],
    [void],
    "payable"
  >;

  ping: TypedContractMethod<[], [string], "view">;

  raiseDispute: TypedContractMethod<
    [ipTokenId: BigNumberish, reason: string, evidence: string],
    [bigint],
    "nonpayable"
  >;

  registerIP: TypedContractMethod<
    [ipHash: string, metadata: string, tokenUriString: string],
    [bigint],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [disputeId: BigNumberish, status: BigNumberish, arbitrator: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyShares: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setIPStatus: TypedContractMethod<
    [ipTokenId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalDisputes: TypedContractMethod<[], [bigint], "view">;

  totalIPs: TypedContractMethod<[], [bigint], "view">;

  totalLicenses: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferRoyaltyShares: TypedContractMethod<
    [ipTokenId: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PLATFORM_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROYALTY_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRoyalties"
  ): TypedContractMethod<[ipTokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disputes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, bigint, bigint, string] & {
        disputeId: bigint;
        ipTokenId: bigint;
        disputer: string;
        reason: string;
        evidence: string;
        timestamp: bigint;
        status: bigint;
        arbitrator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "erc6551Registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDispute"
  ): TypedContractMethod<
    [disputeId: BigNumberish],
    [ModredIP.DisputeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIPAsset"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [ModredIP.IPAssetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIPDisputes"
  ): TypedContractMethod<[ipTokenId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getIPLicenses"
  ): TypedContractMethod<[ipTokenId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLicense"
  ): TypedContractMethod<
    [licenseId: BigNumberish],
    [ModredIP.LicenseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLicenseeLicenses"
  ): TypedContractMethod<[licensee: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getOwnerIPs"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyShare"
  ): TypedContractMethod<
    [ipTokenId: BigNumberish, holder: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ipAssets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        tokenId: bigint;
        owner: string;
        ipHash: string;
        metadata: string;
        isActive: boolean;
        isDisputed: boolean;
        registrationDate: bigint;
        totalRevenue: bigint;
        royaltyTokens: bigint;
        tokenBoundAccount: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ipToDisputes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ipToLicenses"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "licenseeToLicenses"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "licenses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        licenseId: bigint;
        ipTokenId: bigint;
        licensee: string;
        commercialUse: boolean;
        derivativeWorks: boolean;
        exclusive: boolean;
        revenueShare: bigint;
        duration: bigint;
        issueDate: bigint;
        isActive: boolean;
        terms: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintLicense"
  ): TypedContractMethod<
    [
      ipTokenId: BigNumberish,
      commercialUse: boolean,
      derivativeWorks: boolean,
      exclusive: boolean,
      revenueShare: BigNumberish,
      duration: BigNumberish,
      terms: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ownerToIPs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "payRevenue"
  ): TypedContractMethod<
    [ipTokenId: BigNumberish, description: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ping"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<
    [ipTokenId: BigNumberish, reason: string, evidence: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerIP"
  ): TypedContractMethod<
    [ipHash: string, metadata: string, tokenUriString: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [disputeId: BigNumberish, status: BigNumberish, arbitrator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyShares"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIPStatus"
  ): TypedContractMethod<
    [ipTokenId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalDisputes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalIPs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalLicenses"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferRoyaltyShares"
  ): TypedContractMethod<
    [ipTokenId: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "IPRegistered"
  ): TypedContractEvent<
    IPRegisteredEvent.InputTuple,
    IPRegisteredEvent.OutputTuple,
    IPRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IPStatusChanged"
  ): TypedContractEvent<
    IPStatusChangedEvent.InputTuple,
    IPStatusChangedEvent.OutputTuple,
    IPStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "LicenseMinted"
  ): TypedContractEvent<
    LicenseMintedEvent.InputTuple,
    LicenseMintedEvent.OutputTuple,
    LicenseMintedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RevenuePaid"
  ): TypedContractEvent<
    RevenuePaidEvent.InputTuple,
    RevenuePaidEvent.OutputTuple,
    RevenuePaidEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyClaimed"
  ): TypedContractEvent<
    RoyaltyClaimedEvent.InputTuple,
    RoyaltyClaimedEvent.OutputTuple,
    RoyaltyClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "DisputeRaised(uint256,uint256,address)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeResolved(uint256,uint8)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "IPRegistered(uint256,address,string,address)": TypedContractEvent<
      IPRegisteredEvent.InputTuple,
      IPRegisteredEvent.OutputTuple,
      IPRegisteredEvent.OutputObject
    >;
    IPRegistered: TypedContractEvent<
      IPRegisteredEvent.InputTuple,
      IPRegisteredEvent.OutputTuple,
      IPRegisteredEvent.OutputObject
    >;

    "IPStatusChanged(uint256,bool,bool)": TypedContractEvent<
      IPStatusChangedEvent.InputTuple,
      IPStatusChangedEvent.OutputTuple,
      IPStatusChangedEvent.OutputObject
    >;
    IPStatusChanged: TypedContractEvent<
      IPStatusChangedEvent.InputTuple,
      IPStatusChangedEvent.OutputTuple,
      IPStatusChangedEvent.OutputObject
    >;

    "LicenseMinted(uint256,uint256,address)": TypedContractEvent<
      LicenseMintedEvent.InputTuple,
      LicenseMintedEvent.OutputTuple,
      LicenseMintedEvent.OutputObject
    >;
    LicenseMinted: TypedContractEvent<
      LicenseMintedEvent.InputTuple,
      LicenseMintedEvent.OutputTuple,
      LicenseMintedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RevenuePaid(uint256,address,uint256,string)": TypedContractEvent<
      RevenuePaidEvent.InputTuple,
      RevenuePaidEvent.OutputTuple,
      RevenuePaidEvent.OutputObject
    >;
    RevenuePaid: TypedContractEvent<
      RevenuePaidEvent.InputTuple,
      RevenuePaidEvent.OutputTuple,
      RevenuePaidEvent.OutputObject
    >;

    "RoyaltyClaimed(uint256,address,uint256)": TypedContractEvent<
      RoyaltyClaimedEvent.InputTuple,
      RoyaltyClaimedEvent.OutputTuple,
      RoyaltyClaimedEvent.OutputObject
    >;
    RoyaltyClaimed: TypedContractEvent<
      RoyaltyClaimedEvent.InputTuple,
      RoyaltyClaimedEvent.OutputTuple,
      RoyaltyClaimedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
