// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// IP Asset Manager Models
model IPAsset {
  id                String   @id @default(cuid())
  contractAddress   String   @unique // Contract address on Hedera
  tokenId           BigInt   @unique // ERC-1155 token ID
  name              String
  description       String
  metadataURI       String
  ipfsHash          String?
  owner             String   // Ethereum address
  royaltyPercentage Int      @default(0) // Basis points (100 = 1%)
  isActive          Boolean  @default(true)
  totalRevenue      BigInt   @default(0)
  licenseTokenId    BigInt?
  royaltyTokenId    BigInt
  createdAt         DateTime @default(now())
  lastModified      DateTime @updatedAt

  // Relations
  licenses          License[]
  royalties         Royalty[]
  payments          Payment[]
  transactions      IPAssetTransaction[]
  user              User?    @relation("UserIPAssets", fields: [owner], references: [address])

  @@map("ip_assets")
}

model License {
  id              String   @id @default(cuid())
  contractAddress String   @unique // Contract address on Hedera
  tokenId         BigInt   @unique // ERC-1155 token ID
  ipAssetId       String
  terms           String
  encryptedTerms  String?
  price           BigInt
  maxMints        BigInt
  currentMints    BigInt   @default(0)
  isActive        Boolean  @default(true)
  validFrom       DateTime?
  validUntil      DateTime?
  licenseType     String   @default("standard") // commercial, personal, exclusive, etc.
  createdAt       DateTime @default(now())

  // Relations
  ipAsset         IPAsset  @relation(fields: [ipAssetId], references: [id], onDelete: Cascade)
  mints           LicenseMint[]

  @@map("licenses")
}

model LicenseMint {
  id          String   @id @default(cuid())
  licenseId   String
  buyer       String   // Ethereum address
  amount      BigInt
  price       BigInt
  transactionHash String
  timestamp   DateTime @default(now())

  // Relations
  license     License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@map("license_mints")
}

model Royalty {
  id              String   @id @default(cuid())
  contractAddress String   @unique // Contract address on Hedera
  tokenId         BigInt   @unique // ERC-1155 token ID
  ipAssetId       String
  totalRevenue    BigInt   @default(0)
  totalRoyaltyTokens BigInt @default(10000) // 100% in basis points
  createdAt       DateTime @default(now())

  // Relations
  ipAsset         IPAsset  @relation(fields: [ipAssetId], references: [id], onDelete: Cascade)
  shares          RoyaltyShare[]
  claims          RoyaltyClaim[]

  @@map("royalties")
}

model RoyaltyShare {
  id          String   @id @default(cuid())
  royaltyId   String
  holder      String   // Ethereum address
  shares      BigInt   // Number of shares held
  lastClaimed BigInt   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  royalty     Royalty  @relation(fields: [royaltyId], references: [id], onDelete: Cascade)

  @@unique([royaltyId, holder])
  @@map("royalty_shares")
}

model RoyaltyClaim {
  id          String   @id @default(cuid())
  royaltyId   String
  claimant    String   // Ethereum address
  amount      BigInt
  transactionHash String
  timestamp   DateTime @default(now())

  // Relations
  royalty     Royalty  @relation(fields: [royaltyId], references: [id], onDelete: Cascade)

  @@map("royalty_claims")
}

model Payment {
  id          String   @id @default(cuid())
  ipAssetId   String
  payer       String   // Ethereum address
  amount      BigInt
  description String?
  transactionHash String
  isProcessed Boolean  @default(true)
  timestamp   DateTime @default(now())

  // Relations
  ipAsset     IPAsset  @relation(fields: [ipAssetId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model IPAssetTransaction {
  id          String   @id @default(cuid())
  ipAssetId   String
  transactionHash String @unique
  from        String   // Ethereum address
  to          String?  // Ethereum address (for transfers)
  type        String   // register, transfer, license_mint, royalty_claim, payment
  amount      BigInt?
  metadata    Json?    // Additional transaction data
  timestamp   DateTime @default(now())

  // Relations
  ipAsset     IPAsset  @relation(fields: [ipAssetId], references: [id], onDelete: Cascade)

  @@map("ip_asset_transactions")
}

// Platform Configuration
model PlatformConfig {
  id                    String   @id @default(cuid())
  platformFeePercentage Int      @default(250) // 2.5% in basis points
  platformFeeCollector  String   // Ethereum address
  updatedAt             DateTime @updatedAt

  @@map("platform_config")
}

// User Management
model User {
  id          String   @id @default(cuid())
  address     String   @unique // Ethereum address
  kycStatus   String   @default("pending") // pending, approved, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ipAssets    IPAsset[] @relation("UserIPAssets")

  @@map("users")
}

// Legacy tables (keeping only essential ones)
model Asset {
  token     String   @id @unique
  name      String   @unique
  symbol    String   @unique
  timestamp DateTime @default(now())

  @@map("assets")
}

model KYC {
  account String @id @unique
  token   String
  status  String @default("pending")

  @@map("kyc")
}
